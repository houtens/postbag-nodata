// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: countries.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCountry = `-- name: CreateCountry :one
INSERT INTO countries (
    name,
    flag,
    code,
    priority,
    x_id
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, name, flag, code, priority, x_id
`

type CreateCountryParams struct {
	Name     string         `db:"name"`
	Flag     sql.NullString `db:"flag"`
	Code     sql.NullString `db:"code"`
	Priority bool           `db:"priority"`
	XID      sql.NullString `db:"x_id"`
}

func (q *Queries) CreateCountry(ctx context.Context, arg CreateCountryParams) (Country, error) {
	row := q.db.QueryRowContext(ctx, createCountry,
		arg.Name,
		arg.Flag,
		arg.Code,
		arg.Priority,
		arg.XID,
	)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Flag,
		&i.Code,
		&i.Priority,
		&i.XID,
	)
	return i, err
}

const deleteCountry = `-- name: DeleteCountry :exec
DELETE FROM countries
WHERE id = $1
`

func (q *Queries) DeleteCountry(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCountry, id)
	return err
}

const getCountry = `-- name: GetCountry :one
SELECT id, name, flag, code, priority, x_id FROM countries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCountry(ctx context.Context, id uuid.UUID) (Country, error) {
	row := q.db.QueryRowContext(ctx, getCountry, id)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Flag,
		&i.Code,
		&i.Priority,
		&i.XID,
	)
	return i, err
}

const getCountryByName = `-- name: GetCountryByName :one
SELECT id, name, flag, code, priority, x_id FROM countries
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetCountryByName(ctx context.Context, name string) (Country, error) {
	row := q.db.QueryRowContext(ctx, getCountryByName, name)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Flag,
		&i.Code,
		&i.Priority,
		&i.XID,
	)
	return i, err
}

const getCountryByXID = `-- name: GetCountryByXID :one
SELECT id, name, flag, code, priority, x_id FROM countries 
WHERE x_id = $1 LIMIT 1
`

func (q *Queries) GetCountryByXID(ctx context.Context, xID sql.NullString) (Country, error) {
	row := q.db.QueryRowContext(ctx, getCountryByXID, xID)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Flag,
		&i.Code,
		&i.Priority,
		&i.XID,
	)
	return i, err
}

const listCountries = `-- name: ListCountries :many
SELECT id, name, flag, code, priority, x_id FROM countries
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCountriesParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) ListCountries(ctx context.Context, arg ListCountriesParams) ([]Country, error) {
	rows, err := q.db.QueryContext(ctx, listCountries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Country{}
	for rows.Next() {
		var i Country
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Flag,
			&i.Code,
			&i.Priority,
			&i.XID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const truncateCountries = `-- name: TruncateCountries :exec
truncate countries cascade
`

func (q *Queries) TruncateCountries(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateCountries)
	return err
}

const updateCountry = `-- name: UpdateCountry :one
UPDATE countries
SET flag = $2, code = $3, priority = $4, x_id = $5
WHERE id = $1
RETURNING id, name, flag, code, priority, x_id
`

type UpdateCountryParams struct {
	ID       uuid.UUID      `db:"id"`
	Flag     sql.NullString `db:"flag"`
	Code     sql.NullString `db:"code"`
	Priority bool           `db:"priority"`
	XID      sql.NullString `db:"x_id"`
}

func (q *Queries) UpdateCountry(ctx context.Context, arg UpdateCountryParams) (Country, error) {
	row := q.db.QueryRowContext(ctx, updateCountry,
		arg.ID,
		arg.Flag,
		arg.Code,
		arg.Priority,
		arg.XID,
	)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Flag,
		&i.Code,
		&i.Priority,
		&i.XID,
	)
	return i, err
}
