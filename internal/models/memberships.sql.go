// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: memberships.sql

package models

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createMembership = `-- name: CreateMembership :one
INSERT INTO memberships (
    user_id,
    cost,
    membership_type_id,
    payment_type_id,
    expires_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, cost, membership_type_id, payment_type_id, expires_at, created_at, updated_at
`

type CreateMembershipParams struct {
	UserID           uuid.UUID `db:"user_id"`
	Cost             float32   `db:"cost"`
	MembershipTypeID uuid.UUID `db:"membership_type_id"`
	PaymentTypeID    uuid.UUID `db:"payment_type_id"`
	ExpiresAt        time.Time `db:"expires_at"`
}

func (q *Queries) CreateMembership(ctx context.Context, arg CreateMembershipParams) (Membership, error) {
	row := q.db.QueryRowContext(ctx, createMembership,
		arg.UserID,
		arg.Cost,
		arg.MembershipTypeID,
		arg.PaymentTypeID,
		arg.ExpiresAt,
	)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Cost,
		&i.MembershipTypeID,
		&i.PaymentTypeID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMembership = `-- name: DeleteMembership :exec
DELETE FROM memberships WHERE id = $1
`

func (q *Queries) DeleteMembership(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMembership, id)
	return err
}

const getMembership = `-- name: GetMembership :one
SELECT id, user_id, cost, membership_type_id, payment_type_id, expires_at, created_at, updated_at FROM memberships WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMembership(ctx context.Context, id uuid.UUID) (Membership, error) {
	row := q.db.QueryRowContext(ctx, getMembership, id)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Cost,
		&i.MembershipTypeID,
		&i.PaymentTypeID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getValidMembership = `-- name: GetValidMembership :one
SELECT CASE WHEN expires_at > NOW() THEN 1 ELSE 0 END FROM memberships WHERE user_id = $1 ORDER BY expires_at DESC LIMIT 1
`

func (q *Queries) GetValidMembership(ctx context.Context, userID uuid.UUID) (int32, error) {
	row := q.db.QueryRowContext(ctx, getValidMembership, userID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const listMemberships = `-- name: ListMemberships :many
SELECT id, user_id, cost, membership_type_id, payment_type_id, expires_at, created_at, updated_at FROM memberships ORDER BY id LIMIT $1 OFFSET $2
`

type ListMembershipsParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) ListMemberships(ctx context.Context, arg ListMembershipsParams) ([]Membership, error) {
	rows, err := q.db.QueryContext(ctx, listMemberships, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Membership{}
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Cost,
			&i.MembershipTypeID,
			&i.PaymentTypeID,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const seedMembership = `-- name: SeedMembership :one
INSERT INTO memberships (
    user_id,
    cost,
    membership_type_id,
    payment_type_id,
    expires_at,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, cost, membership_type_id, payment_type_id, expires_at, created_at, updated_at
`

type SeedMembershipParams struct {
	UserID           uuid.UUID `db:"user_id"`
	Cost             float32   `db:"cost"`
	MembershipTypeID uuid.UUID `db:"membership_type_id"`
	PaymentTypeID    uuid.UUID `db:"payment_type_id"`
	ExpiresAt        time.Time `db:"expires_at"`
	CreatedAt        time.Time `db:"created_at"`
	UpdatedAt        time.Time `db:"updated_at"`
}

func (q *Queries) SeedMembership(ctx context.Context, arg SeedMembershipParams) (Membership, error) {
	row := q.db.QueryRowContext(ctx, seedMembership,
		arg.UserID,
		arg.Cost,
		arg.MembershipTypeID,
		arg.PaymentTypeID,
		arg.ExpiresAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Cost,
		&i.MembershipTypeID,
		&i.PaymentTypeID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const truncateMemberships = `-- name: TruncateMemberships :exec
truncate memberships cascade
`

func (q *Queries) TruncateMemberships(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateMemberships)
	return err
}

const updateMembership = `-- name: UpdateMembership :one
UPDATE memberships
SET
    user_id = $2,
    cost = $3,
    membership_type_id = $4,
    payment_type_id = $5,
    expires_at = $6
WHERE
    id = $1
RETURNING id, user_id, cost, membership_type_id, payment_type_id, expires_at, created_at, updated_at
`

type UpdateMembershipParams struct {
	ID               uuid.UUID `db:"id"`
	UserID           uuid.UUID `db:"user_id"`
	Cost             float32   `db:"cost"`
	MembershipTypeID uuid.UUID `db:"membership_type_id"`
	PaymentTypeID    uuid.UUID `db:"payment_type_id"`
	ExpiresAt        time.Time `db:"expires_at"`
}

func (q *Queries) UpdateMembership(ctx context.Context, arg UpdateMembershipParams) (Membership, error) {
	row := q.db.QueryRowContext(ctx, updateMembership,
		arg.ID,
		arg.UserID,
		arg.Cost,
		arg.MembershipTypeID,
		arg.PaymentTypeID,
		arg.ExpiresAt,
	)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Cost,
		&i.MembershipTypeID,
		&i.PaymentTypeID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
