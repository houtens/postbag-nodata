// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: profile.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getProfile = `-- name: GetProfile :one
SELECT
  u.id,
  u.first_name,
  u.last_name,
  u.alt_name,
  u.absp_num,
  u.avatar,
  c.name as club_name,
  c.id as club_id,
  c.county,
  t.name as title_name,
  r.name as role_name
FROM users u
LEFT JOIN clubs c ON u.club_id = c.id 
LEFT JOIN titles t ON u.title_id = t.id 
LEFT JOIN auth_roles r ON u.role_id = r.id
WHERE u.id = $1
LIMIT 1
`

type GetProfileRow struct {
	ID        uuid.UUID      `db:"id"`
	FirstName string         `db:"first_name"`
	LastName  string         `db:"last_name"`
	AltName   sql.NullString `db:"alt_name"`
	AbspNum   sql.NullInt32  `db:"absp_num"`
	Avatar    sql.NullString `db:"avatar"`
	ClubName  sql.NullString `db:"club_name"`
	ClubID    uuid.NullUUID  `db:"club_id"`
	County    sql.NullString `db:"county"`
	TitleName sql.NullString `db:"title_name"`
	RoleName  sql.NullString `db:"role_name"`
}

func (q *Queries) GetProfile(ctx context.Context, id uuid.UUID) (GetProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getProfile, id)
	var i GetProfileRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.AltName,
		&i.AbspNum,
		&i.Avatar,
		&i.ClubName,
		&i.ClubID,
		&i.County,
		&i.TitleName,
		&i.RoleName,
	)
	return i, err
}
