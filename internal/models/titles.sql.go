// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: titles.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const createTitle = `-- name: CreateTitle :one
INSERT INTO titles (
    name
) VALUES (
    $1
) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateTitle(ctx context.Context, name string) (Title, error) {
	row := q.db.QueryRowContext(ctx, createTitle, name)
	var i Title
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTitle = `-- name: DeleteTitle :exec
DELETE FROM titles where id = $1
`

func (q *Queries) DeleteTitle(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTitle, id)
	return err
}

const getTitle = `-- name: GetTitle :one
SELECT id, name, created_at, updated_at FROM titles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTitle(ctx context.Context, id uuid.UUID) (Title, error) {
	row := q.db.QueryRowContext(ctx, getTitle, id)
	var i Title
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTitles = `-- name: ListTitles :many
SELECT id, name, created_at, updated_at FROM titles
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTitlesParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) ListTitles(ctx context.Context, arg ListTitlesParams) ([]Title, error) {
	rows, err := q.db.QueryContext(ctx, listTitles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Title{}
	for rows.Next() {
		var i Title
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const truncateTitles = `-- name: TruncateTitles :exec
truncate titles cascade
`

func (q *Queries) TruncateTitles(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateTitles)
	return err
}
