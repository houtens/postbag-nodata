// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: clubs.sql

package models

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createClub = `-- name: CreateClub :one
INSERT INTO clubs (
    name,
    county,
    website,
    is_active,
    phone,
    email,
    contact_name,
    country_id,
    x_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, name, county, website, is_active, phone, email, contact_name, country_id, x_id, created_at, updated_at
`

type CreateClubParams struct {
	Name        string         `db:"name"`
	County      sql.NullString `db:"county"`
	Website     sql.NullString `db:"website"`
	IsActive    bool           `db:"is_active"`
	Phone       sql.NullString `db:"phone"`
	Email       sql.NullString `db:"email"`
	ContactName sql.NullString `db:"contact_name"`
	CountryID   uuid.NullUUID  `db:"country_id"`
	XID         string         `db:"x_id"`
}

func (q *Queries) CreateClub(ctx context.Context, arg CreateClubParams) (Club, error) {
	row := q.db.QueryRowContext(ctx, createClub,
		arg.Name,
		arg.County,
		arg.Website,
		arg.IsActive,
		arg.Phone,
		arg.Email,
		arg.ContactName,
		arg.CountryID,
		arg.XID,
	)
	var i Club
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.County,
		&i.Website,
		&i.IsActive,
		&i.Phone,
		&i.Email,
		&i.ContactName,
		&i.CountryID,
		&i.XID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteClub = `-- name: DeleteClub :exec
DELETE FROM clubs WHERE id = $1
`

func (q *Queries) DeleteClub(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteClub, id)
	return err
}

const getClub = `-- name: GetClub :one
SELECT id, name, county, website, is_active, phone, email, contact_name, country_id, x_id, created_at, updated_at FROM clubs WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClub(ctx context.Context, id uuid.UUID) (Club, error) {
	row := q.db.QueryRowContext(ctx, getClub, id)
	var i Club
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.County,
		&i.Website,
		&i.IsActive,
		&i.Phone,
		&i.Email,
		&i.ContactName,
		&i.CountryID,
		&i.XID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClubWithCountry = `-- name: GetClubWithCountry :one
SELECT clubs.id, clubs.name, county, website, is_active, phone, email, contact_name, country_id, clubs.x_id, created_at, updated_at, countries.id, countries.name, flag, code, priority, countries.x_id FROM clubs join countries on clubs.country_id = countries.id
WHERE clubs.id = $1 LIMIT 1
`

type GetClubWithCountryRow struct {
	ID          uuid.UUID      `db:"id"`
	Name        string         `db:"name"`
	County      sql.NullString `db:"county"`
	Website     sql.NullString `db:"website"`
	IsActive    bool           `db:"is_active"`
	Phone       sql.NullString `db:"phone"`
	Email       sql.NullString `db:"email"`
	ContactName sql.NullString `db:"contact_name"`
	CountryID   uuid.NullUUID  `db:"country_id"`
	XID         string         `db:"x_id"`
	CreatedAt   time.Time      `db:"created_at"`
	UpdatedAt   time.Time      `db:"updated_at"`
	ID_2        uuid.UUID      `db:"id_2"`
	Name_2      string         `db:"name_2"`
	Flag        sql.NullString `db:"flag"`
	Code        sql.NullString `db:"code"`
	Priority    bool           `db:"priority"`
	XID_2       sql.NullString `db:"x_id_2"`
}

func (q *Queries) GetClubWithCountry(ctx context.Context, id uuid.UUID) (GetClubWithCountryRow, error) {
	row := q.db.QueryRowContext(ctx, getClubWithCountry, id)
	var i GetClubWithCountryRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.County,
		&i.Website,
		&i.IsActive,
		&i.Phone,
		&i.Email,
		&i.ContactName,
		&i.CountryID,
		&i.XID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.Name_2,
		&i.Flag,
		&i.Code,
		&i.Priority,
		&i.XID_2,
	)
	return i, err
}

const listClubs = `-- name: ListClubs :many
SELECT id, name, county, website, is_active, phone, email, contact_name, country_id, x_id, created_at, updated_at FROM clubs ORDER BY name LIMIT $1 OFFSET $2
`

type ListClubsParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) ListClubs(ctx context.Context, arg ListClubsParams) ([]Club, error) {
	rows, err := q.db.QueryContext(ctx, listClubs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Club{}
	for rows.Next() {
		var i Club
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.County,
			&i.Website,
			&i.IsActive,
			&i.Phone,
			&i.Email,
			&i.ContactName,
			&i.CountryID,
			&i.XID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClubsWithCountry = `-- name: ListClubsWithCountry :many
SELECT c.id, c.name, c.county, r.name as country
FROM clubs c JOIN countries r ON c.country_id = r.id 
ORDER BY c.name 
OFFSET $1
LIMIT $2
`

type ListClubsWithCountryParams struct {
	Offset int32 `db:"offset"`
	Limit  int32 `db:"limit"`
}

type ListClubsWithCountryRow struct {
	ID      uuid.UUID      `db:"id"`
	Name    string         `db:"name"`
	County  sql.NullString `db:"county"`
	Country string         `db:"country"`
}

func (q *Queries) ListClubsWithCountry(ctx context.Context, arg ListClubsWithCountryParams) ([]ListClubsWithCountryRow, error) {
	rows, err := q.db.QueryContext(ctx, listClubsWithCountry, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListClubsWithCountryRow{}
	for rows.Next() {
		var i ListClubsWithCountryRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.County,
			&i.Country,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const truncateClubs = `-- name: TruncateClubs :exec
truncate clubs cascade
`

func (q *Queries) TruncateClubs(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateClubs)
	return err
}

const updateClub = `-- name: UpdateClub :one
UPDATE clubs
SET
  name = $2,
  county = $3,
  website = $4,
  is_active = $5,
  phone = $6,
  email = $7,
  contact_name = $8,
  country_id = $9,
  x_id = $10,
  updated_at = now()
WHERE
  id = $1
RETURNING id, name, county, website, is_active, phone, email, contact_name, country_id, x_id, created_at, updated_at
`

type UpdateClubParams struct {
	ID          uuid.UUID      `db:"id"`
	Name        string         `db:"name"`
	County      sql.NullString `db:"county"`
	Website     sql.NullString `db:"website"`
	IsActive    bool           `db:"is_active"`
	Phone       sql.NullString `db:"phone"`
	Email       sql.NullString `db:"email"`
	ContactName sql.NullString `db:"contact_name"`
	CountryID   uuid.NullUUID  `db:"country_id"`
	XID         string         `db:"x_id"`
}

func (q *Queries) UpdateClub(ctx context.Context, arg UpdateClubParams) (Club, error) {
	row := q.db.QueryRowContext(ctx, updateClub,
		arg.ID,
		arg.Name,
		arg.County,
		arg.Website,
		arg.IsActive,
		arg.Phone,
		arg.Email,
		arg.ContactName,
		arg.CountryID,
		arg.XID,
	)
	var i Club
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.County,
		&i.Website,
		&i.IsActive,
		&i.Phone,
		&i.Email,
		&i.ContactName,
		&i.CountryID,
		&i.XID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
