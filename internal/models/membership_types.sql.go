// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: membership_types.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const createMembershipType = `-- name: CreateMembershipType :one
INSERT INTO membership_types (
    name,
    code,
    num_years,
    is_junior,
    is_post,
    is_life
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, name, code, num_years, is_junior, is_post, is_life, created_at, updated_at
`

type CreateMembershipTypeParams struct {
	Name     string `db:"name"`
	Code     string `db:"code"`
	NumYears int32  `db:"num_years"`
	IsJunior bool   `db:"is_junior"`
	IsPost   bool   `db:"is_post"`
	IsLife   bool   `db:"is_life"`
}

func (q *Queries) CreateMembershipType(ctx context.Context, arg CreateMembershipTypeParams) (MembershipType, error) {
	row := q.db.QueryRowContext(ctx, createMembershipType,
		arg.Name,
		arg.Code,
		arg.NumYears,
		arg.IsJunior,
		arg.IsPost,
		arg.IsLife,
	)
	var i MembershipType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.NumYears,
		&i.IsJunior,
		&i.IsPost,
		&i.IsLife,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMembershipType = `-- name: DeleteMembershipType :exec
DELETE FROM membership_types WHERE id = $1
`

func (q *Queries) DeleteMembershipType(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMembershipType, id)
	return err
}

const getMembershipType = `-- name: GetMembershipType :one
SELECT id, name, code, num_years, is_junior, is_post, is_life, created_at, updated_at FROM membership_types WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMembershipType(ctx context.Context, id uuid.UUID) (MembershipType, error) {
	row := q.db.QueryRowContext(ctx, getMembershipType, id)
	var i MembershipType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.NumYears,
		&i.IsJunior,
		&i.IsPost,
		&i.IsLife,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMembershipTypeByName = `-- name: GetMembershipTypeByName :one
SELECT id, name, code, num_years, is_junior, is_post, is_life, created_at, updated_at FROM membership_types WHERE name = $1 LIMIT 1
`

func (q *Queries) GetMembershipTypeByName(ctx context.Context, name string) (MembershipType, error) {
	row := q.db.QueryRowContext(ctx, getMembershipTypeByName, name)
	var i MembershipType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.NumYears,
		&i.IsJunior,
		&i.IsPost,
		&i.IsLife,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMembershipTypes = `-- name: ListMembershipTypes :many
SELECT id, name, code, num_years, is_junior, is_post, is_life, created_at, updated_at FROM membership_types ORDER BY id LIMIT $1 OFFSET $2
`

type ListMembershipTypesParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) ListMembershipTypes(ctx context.Context, arg ListMembershipTypesParams) ([]MembershipType, error) {
	rows, err := q.db.QueryContext(ctx, listMembershipTypes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipType{}
	for rows.Next() {
		var i MembershipType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.NumYears,
			&i.IsJunior,
			&i.IsPost,
			&i.IsLife,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const truncateMembershipTypes = `-- name: TruncateMembershipTypes :exec
truncate membership_types cascade
`

func (q *Queries) TruncateMembershipTypes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateMembershipTypes)
	return err
}

const updateMembershipType = `-- name: UpdateMembershipType :one
UPDATE membership_types
SET
    name = $2,
    code = $3,
    num_years = $4,
    is_junior = $5,
    is_post = $6,
    is_life = $7
WHERE
    id = $1
RETURNING id, name, code, num_years, is_junior, is_post, is_life, created_at, updated_at
`

type UpdateMembershipTypeParams struct {
	ID       uuid.UUID `db:"id"`
	Name     string    `db:"name"`
	Code     string    `db:"code"`
	NumYears int32     `db:"num_years"`
	IsJunior bool      `db:"is_junior"`
	IsPost   bool      `db:"is_post"`
	IsLife   bool      `db:"is_life"`
}

func (q *Queries) UpdateMembershipType(ctx context.Context, arg UpdateMembershipTypeParams) (MembershipType, error) {
	row := q.db.QueryRowContext(ctx, updateMembershipType,
		arg.ID,
		arg.Name,
		arg.Code,
		arg.NumYears,
		arg.IsJunior,
		arg.IsPost,
		arg.IsLife,
	)
	var i MembershipType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.NumYears,
		&i.IsJunior,
		&i.IsPost,
		&i.IsLife,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
