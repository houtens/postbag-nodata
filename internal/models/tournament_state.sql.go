// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: tournament_state.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const createTournamentState = `-- name: CreateTournamentState :one
INSERT INTO tournament_state (
    name,
    code
) VALUES (
    $1, $2
) RETURNING id, name, code, created_at, updated_at
`

type CreateTournamentStateParams struct {
	Name string `db:"name"`
	Code string `db:"code"`
}

func (q *Queries) CreateTournamentState(ctx context.Context, arg CreateTournamentStateParams) (TournamentState, error) {
	row := q.db.QueryRowContext(ctx, createTournamentState, arg.Name, arg.Code)
	var i TournamentState
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTournamentState = `-- name: DeleteTournamentState :exec
DELETE FROM tournament_state WHERE id = $1
`

func (q *Queries) DeleteTournamentState(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTournamentState, id)
	return err
}

const getTournamentState = `-- name: GetTournamentState :one
SELECT id, name, code, created_at, updated_at FROM tournament_state WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTournamentState(ctx context.Context, id uuid.UUID) (TournamentState, error) {
	row := q.db.QueryRowContext(ctx, getTournamentState, id)
	var i TournamentState
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTournamentStates = `-- name: ListTournamentStates :many
SELECT id, name, code, created_at, updated_at FROM tournament_state ORDER BY id LIMIT $1 OFFSET $2
`

type ListTournamentStatesParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) ListTournamentStates(ctx context.Context, arg ListTournamentStatesParams) ([]TournamentState, error) {
	rows, err := q.db.QueryContext(ctx, listTournamentStates, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TournamentState{}
	for rows.Next() {
		var i TournamentState
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const truncateTournamentState = `-- name: TruncateTournamentState :exec
truncate tournament_state cascade
`

func (q *Queries) TruncateTournamentState(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateTournamentState)
	return err
}

const updateTournamentState = `-- name: UpdateTournamentState :one
UPDATE tournament_state 
SET 
    name = $2,
    code = $3
WHERE id = $1 RETURNING id, name, code, created_at, updated_at
`

type UpdateTournamentStateParams struct {
	ID   uuid.UUID `db:"id"`
	Name string    `db:"name"`
	Code string    `db:"code"`
}

func (q *Queries) UpdateTournamentState(ctx context.Context, arg UpdateTournamentStateParams) (TournamentState, error) {
	row := q.db.QueryRowContext(ctx, updateTournamentState, arg.ID, arg.Name, arg.Code)
	var i TournamentState
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
