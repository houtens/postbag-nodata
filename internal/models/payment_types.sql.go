// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: payment_types.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const createPaymentType = `-- name: CreatePaymentType :one
INSERT INTO payment_types (name) VALUES ($1) RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreatePaymentType(ctx context.Context, name string) (PaymentType, error) {
	row := q.db.QueryRowContext(ctx, createPaymentType, name)
	var i PaymentType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePaymentType = `-- name: DeletePaymentType :exec
DELETE FROM payment_types WHERE id = $1
`

func (q *Queries) DeletePaymentType(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePaymentType, id)
	return err
}

const getPaymentType = `-- name: GetPaymentType :one
SELECT id, name, created_at, updated_at FROM payment_types WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPaymentType(ctx context.Context, id uuid.UUID) (PaymentType, error) {
	row := q.db.QueryRowContext(ctx, getPaymentType, id)
	var i PaymentType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentTypeByName = `-- name: GetPaymentTypeByName :one
SELECT id, name, created_at, updated_at FROM payment_types WHERE name = $1 LIMIT 1
`

func (q *Queries) GetPaymentTypeByName(ctx context.Context, name string) (PaymentType, error) {
	row := q.db.QueryRowContext(ctx, getPaymentTypeByName, name)
	var i PaymentType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPaymentTypes = `-- name: ListPaymentTypes :many
SELECT id, name, created_at, updated_at FROM payment_types
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPaymentTypesParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) ListPaymentTypes(ctx context.Context, arg ListPaymentTypesParams) ([]PaymentType, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentTypes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentType{}
	for rows.Next() {
		var i PaymentType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const truncatePaymentTypes = `-- name: TruncatePaymentTypes :exec
truncate payment_types cascade
`

func (q *Queries) TruncatePaymentTypes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncatePaymentTypes)
	return err
}

const updatePaymentType = `-- name: UpdatePaymentType :one
UPDATE payment_types
SET name = $2 WHERE id = $1 RETURNING id, name, created_at, updated_at
`

type UpdatePaymentTypeParams struct {
	ID   uuid.UUID `db:"id"`
	Name string    `db:"name"`
}

func (q *Queries) UpdatePaymentType(ctx context.Context, arg UpdatePaymentTypeParams) (PaymentType, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentType, arg.ID, arg.Name)
	var i PaymentType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
