// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: invoices.sql

package models

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (
    tournament_id,
    num_players,
    num_non_members,
    num_games,
    is_multiday,
    is_overseas,
    levy_cost,
    extras_cost,
    total_cost,
    is_paid,
    description,
    extras_comment,
    comment
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
) RETURNING id, tournament_id, num_players, num_non_members, num_games, is_multiday, is_overseas, levy_cost, extras_cost, total_cost, is_paid, description, extras_comment, comment, created_at, updated_at
`

type CreateInvoiceParams struct {
	TournamentID  uuid.UUID      `db:"tournament_id"`
	NumPlayers    int32          `db:"num_players"`
	NumNonMembers int32          `db:"num_non_members"`
	NumGames      int32          `db:"num_games"`
	IsMultiday    bool           `db:"is_multiday"`
	IsOverseas    bool           `db:"is_overseas"`
	LevyCost      float32        `db:"levy_cost"`
	ExtrasCost    float32        `db:"extras_cost"`
	TotalCost     float32        `db:"total_cost"`
	IsPaid        bool           `db:"is_paid"`
	Description   sql.NullString `db:"description"`
	ExtrasComment sql.NullString `db:"extras_comment"`
	Comment       sql.NullString `db:"comment"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, createInvoice,
		arg.TournamentID,
		arg.NumPlayers,
		arg.NumNonMembers,
		arg.NumGames,
		arg.IsMultiday,
		arg.IsOverseas,
		arg.LevyCost,
		arg.ExtrasCost,
		arg.TotalCost,
		arg.IsPaid,
		arg.Description,
		arg.ExtrasComment,
		arg.Comment,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.TournamentID,
		&i.NumPlayers,
		&i.NumNonMembers,
		&i.NumGames,
		&i.IsMultiday,
		&i.IsOverseas,
		&i.LevyCost,
		&i.ExtrasCost,
		&i.TotalCost,
		&i.IsPaid,
		&i.Description,
		&i.ExtrasComment,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInvoice = `-- name: DeleteInvoice :exec
DELETE FROM invoices WHERE id = $1
`

func (q *Queries) DeleteInvoice(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteInvoice, id)
	return err
}

const getInvoice = `-- name: GetInvoice :one
SELECT id, tournament_id, num_players, num_non_members, num_games, is_multiday, is_overseas, levy_cost, extras_cost, total_cost, is_paid, description, extras_comment, comment, created_at, updated_at FROM invoices WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInvoice(ctx context.Context, id uuid.UUID) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoice, id)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.TournamentID,
		&i.NumPlayers,
		&i.NumNonMembers,
		&i.NumGames,
		&i.IsMultiday,
		&i.IsOverseas,
		&i.LevyCost,
		&i.ExtrasCost,
		&i.TotalCost,
		&i.IsPaid,
		&i.Description,
		&i.ExtrasComment,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listInvoices = `-- name: ListInvoices :many
SELECT id, tournament_id, num_players, num_non_members, num_games, is_multiday, is_overseas, levy_cost, extras_cost, total_cost, is_paid, description, extras_comment, comment, created_at, updated_at FROM invoices ORDER BY id LIMIT $1 OFFSET $2
`

type ListInvoicesParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) ListInvoices(ctx context.Context, arg ListInvoicesParams) ([]Invoice, error) {
	rows, err := q.db.QueryContext(ctx, listInvoices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invoice{}
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.TournamentID,
			&i.NumPlayers,
			&i.NumNonMembers,
			&i.NumGames,
			&i.IsMultiday,
			&i.IsOverseas,
			&i.LevyCost,
			&i.ExtrasCost,
			&i.TotalCost,
			&i.IsPaid,
			&i.Description,
			&i.ExtrasComment,
			&i.Comment,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const seedInvoice = `-- name: SeedInvoice :one
INSERT INTO invoices (
    tournament_id,
    num_players,
    num_non_members,
    num_games,
    is_multiday,
    is_overseas,
    levy_cost,
    extras_cost,
    total_cost,
    is_paid,
    description,
    extras_comment,
    comment,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15
) RETURNING id, tournament_id, num_players, num_non_members, num_games, is_multiday, is_overseas, levy_cost, extras_cost, total_cost, is_paid, description, extras_comment, comment, created_at, updated_at
`

type SeedInvoiceParams struct {
	TournamentID  uuid.UUID      `db:"tournament_id"`
	NumPlayers    int32          `db:"num_players"`
	NumNonMembers int32          `db:"num_non_members"`
	NumGames      int32          `db:"num_games"`
	IsMultiday    bool           `db:"is_multiday"`
	IsOverseas    bool           `db:"is_overseas"`
	LevyCost      float32        `db:"levy_cost"`
	ExtrasCost    float32        `db:"extras_cost"`
	TotalCost     float32        `db:"total_cost"`
	IsPaid        bool           `db:"is_paid"`
	Description   sql.NullString `db:"description"`
	ExtrasComment sql.NullString `db:"extras_comment"`
	Comment       sql.NullString `db:"comment"`
	CreatedAt     time.Time      `db:"created_at"`
	UpdatedAt     time.Time      `db:"updated_at"`
}

func (q *Queries) SeedInvoice(ctx context.Context, arg SeedInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, seedInvoice,
		arg.TournamentID,
		arg.NumPlayers,
		arg.NumNonMembers,
		arg.NumGames,
		arg.IsMultiday,
		arg.IsOverseas,
		arg.LevyCost,
		arg.ExtrasCost,
		arg.TotalCost,
		arg.IsPaid,
		arg.Description,
		arg.ExtrasComment,
		arg.Comment,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.TournamentID,
		&i.NumPlayers,
		&i.NumNonMembers,
		&i.NumGames,
		&i.IsMultiday,
		&i.IsOverseas,
		&i.LevyCost,
		&i.ExtrasCost,
		&i.TotalCost,
		&i.IsPaid,
		&i.Description,
		&i.ExtrasComment,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const truncateInvoices = `-- name: TruncateInvoices :exec
truncate invoices cascade
`

func (q *Queries) TruncateInvoices(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateInvoices)
	return err
}

const updateInvoice = `-- name: UpdateInvoice :one
UPDATE invoices
SET
    tournament_id = $2,
    num_players = $3,
    num_non_members = $4,
    num_games = $5,
    is_multiday = $6,
    is_overseas = $7,
    levy_cost = $8,
    extras_cost = $9,
    total_cost = $10,
    is_paid = $11,
    description = $12,
    extras_comment = $13,
    comment = $14
WHERE
  id = $1
RETURNING id, tournament_id, num_players, num_non_members, num_games, is_multiday, is_overseas, levy_cost, extras_cost, total_cost, is_paid, description, extras_comment, comment, created_at, updated_at
`

type UpdateInvoiceParams struct {
	ID            uuid.UUID      `db:"id"`
	TournamentID  uuid.UUID      `db:"tournament_id"`
	NumPlayers    int32          `db:"num_players"`
	NumNonMembers int32          `db:"num_non_members"`
	NumGames      int32          `db:"num_games"`
	IsMultiday    bool           `db:"is_multiday"`
	IsOverseas    bool           `db:"is_overseas"`
	LevyCost      float32        `db:"levy_cost"`
	ExtrasCost    float32        `db:"extras_cost"`
	TotalCost     float32        `db:"total_cost"`
	IsPaid        bool           `db:"is_paid"`
	Description   sql.NullString `db:"description"`
	ExtrasComment sql.NullString `db:"extras_comment"`
	Comment       sql.NullString `db:"comment"`
}

func (q *Queries) UpdateInvoice(ctx context.Context, arg UpdateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, updateInvoice,
		arg.ID,
		arg.TournamentID,
		arg.NumPlayers,
		arg.NumNonMembers,
		arg.NumGames,
		arg.IsMultiday,
		arg.IsOverseas,
		arg.LevyCost,
		arg.ExtrasCost,
		arg.TotalCost,
		arg.IsPaid,
		arg.Description,
		arg.ExtrasComment,
		arg.Comment,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.TournamentID,
		&i.NumPlayers,
		&i.NumNonMembers,
		&i.NumGames,
		&i.IsMultiday,
		&i.IsOverseas,
		&i.LevyCost,
		&i.ExtrasCost,
		&i.TotalCost,
		&i.IsPaid,
		&i.Description,
		&i.ExtrasComment,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
